// <auto-generated />
using System;
using Entity.Context.Main;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.Colegio.Asignaturas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Colegio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colegios");
                });

            modelBuilder.Entity("Entity.Model.Colegio.CursoAsignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("CursoId");

                    b.ToTable("CursoAsignatura");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Cursos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColegioId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColegioId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Estudiantes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColegioId")
                        .HasColumnType("integer");

                    b.Property<int>("CursosId")
                        .HasColumnType("integer");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<int>("SalonesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColegioId");

                    b.HasIndex("CursosId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("SalonesId");

                    b.ToTable("Matricula");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Notas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturasId")
                        .HasColumnType("integer");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Nota")
                        .HasColumnType("numeric");

                    b.Property<int>("PeriodosId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturasId");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("PeriodosId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Periodos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColegioId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStar")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ColegioId");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Salones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Salones");
                });

            modelBuilder.Entity("Entity.Model.Colegio.CursoAsignatura", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Asignaturas", "Asignatura")
                        .WithMany("CursoAsignatura")
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Cursos", "Curso")
                        .WithMany("CursoAsignatura")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Cursos", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Colegio", "Colegio")
                        .WithMany("Cursos")
                        .HasForeignKey("ColegioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colegio");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Matricula", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Colegio", "Colegio")
                        .WithMany()
                        .HasForeignKey("ColegioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Cursos", "Cursos")
                        .WithMany("Matricula")
                        .HasForeignKey("CursosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Estudiantes", "Estudiante")
                        .WithMany("Matricula")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Salones", "Salones")
                        .WithMany()
                        .HasForeignKey("SalonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colegio");

                    b.Navigation("Cursos");

                    b.Navigation("Estudiante");

                    b.Navigation("Salones");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Notas", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Asignaturas", "Asignaturas")
                        .WithMany("Notas")
                        .HasForeignKey("AsignaturasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Matricula", "Matricula")
                        .WithMany("Notas")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Colegio.Periodos", "Periodos")
                        .WithMany("Notas")
                        .HasForeignKey("PeriodosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignaturas");

                    b.Navigation("Matricula");

                    b.Navigation("Periodos");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Periodos", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Colegio", "Colegio")
                        .WithMany()
                        .HasForeignKey("ColegioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colegio");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Salones", b =>
                {
                    b.HasOne("Entity.Model.Colegio.Cursos", "Curso")
                        .WithMany("Salones")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Asignaturas", b =>
                {
                    b.Navigation("CursoAsignatura");

                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Colegio", b =>
                {
                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Cursos", b =>
                {
                    b.Navigation("CursoAsignatura");

                    b.Navigation("Matricula");

                    b.Navigation("Salones");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Estudiantes", b =>
                {
                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Matricula", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Entity.Model.Colegio.Periodos", b =>
                {
                    b.Navigation("Notas");
                });
#pragma warning restore 612, 618
        }
    }
}
